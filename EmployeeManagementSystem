import java.util.ArrayList;
import java.util.Scanner;

// Employee Class
class Employee {
    private int id;
    private String name;
    private int age;
    private String department;
    private double salary;

    public Employee(int id, String name, int age, String department, double salary) {
        this.id = id;
        this.name = name;
        this.age = age;
        this.department = department;
        this.salary = salary;
    }

    public int getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public int getAge() {
        return age;
    }

    public void setAge(int age) {
        this.age = age;
    }

    public String getDepartment() {
        return department;
    }

    public void setDepartment(String department) {
        this.department = department;
    }

    public double getSalary() {
        return salary;
    }

    public void setSalary(double salary) {
        this.salary = salary;
    }

    @Override
    public String toString() {
        return "ID: " + id + ", Name: " + name + ", Age: " + age + 
               ", Department: " + department + ", Salary: " + salary;
    }
}

// Employee Manager Class
class EmployeeManager {
    private ArrayList<Employee> employees = new ArrayList<>();
    private Scanner scanner = new Scanner(System.in);

    public void addEmployee() {
        System.out.print("Enter Employee ID: ");
        int id = scanner.nextInt();
        scanner.nextLine(); // Consume newline
        System.out.print("Enter Name: ");
        String name = scanner.nextLine();
        System.out.print("Enter Age: ");
        int age = scanner.nextInt();
        scanner.nextLine(); // Consume newline
        System.out.print("Enter Department: ");
        String department = scanner.nextLine();
        System.out.print("Enter Salary: ");
        double salary = scanner.nextDouble();

        employees.add(new Employee(id, name, age, department, salary));
        System.out.println("Employee added successfully!");
    }

    public void viewEmployees() {
        if (employees.isEmpty()) {
            System.out.println("No employees found.");
        } else {
            System.out.println("\nEmployee List:");
            for (Employee emp : employees) {
                System.out.println(emp);
            }
        }
    }

    public void searchEmployee() {
        System.out.print("Enter Employee ID to search: ");
        int id = scanner.nextInt();
        for (Employee emp : employees) {
            if (emp.getId() == id) {
                System.out.println("Employee Found: " + emp);
                return;
            }
        }
        System.out.println("Employee with ID " + id + " not found.");
    }

    public void updateEmployee() {
        System.out.print("Enter Employee ID to update: ");
        int id = scanner.nextInt();
        for (Employee emp : employees) {
            if (emp.getId() == id) {
                scanner.nextLine(); // Consume newline
                System.out.print("Enter new Name (or press Enter to keep current): ");
                String name = scanner.nextLine();
                if (!name.isEmpty()) emp.setName(name);

                System.out.print("Enter new Age (or press Enter to keep current): ");
                String ageInput = scanner.nextLine();
                if (!ageInput.isEmpty()) emp.setAge(Integer.parseInt(ageInput));

                System.out.print("Enter new Department (or press Enter to keep current): ");
                String department = scanner.nextLine();
                if (!department.isEmpty()) emp.setDepartment(department);

                System.out.print("Enter new Salary (or press Enter to keep current): ");
                String salaryInput = scanner.nextLine();
                if (!salaryInput.isEmpty()) emp.setSalary(Double.parseDouble(salaryInput));

                System.out.println("Employee updated successfully!");
                return;
            }
        }
        System.out.println("Employee with ID " + id + " not found.");
    }

    public void deleteEmployee() {
        System.out.print("Enter Employee ID to delete: ");
        int id = scanner.nextInt();
        for (Employee emp : employees) {
            if (emp.getId() == id) {
                employees.remove(emp);
                System.out.println("Employee deleted successfully!");
                return;
            }
        }
        System.out.println("Employee with ID " + id + " not found.");
    }

    public void generateReport() {
        if (employees.isEmpty()) {
            System.out.println("No employees to generate a report.");
            return;
        }

        System.out.println("\nDepartment-wise Report:");
        employees.stream()
            .map(Employee::getDepartment)
            .distinct()
            .forEach(department -> {
                System.out.println("\nDepartment: " + department);
                employees.stream()
                    .filter(emp -> emp.getDepartment().equals(department))
                    .forEach(System.out::println);
            });
    }
}

// Main Class
public class EmployeeManagementSystem {
    public static void main(String[] args) {
        EmployeeManager manager = new EmployeeManager();
        Scanner scanner = new Scanner(System.in);

        while (true) {
            System.out.println("\n====== Employee Management System ======");
            System.out.println("1. Add Employee");
            System.out.println("2. View Employees");
            System.out.println("3. Search Employee by ID");
            System.out.println("4. Update Employee");
            System.out.println("5. Delete Employee");
            System.out.println("6. Generate Report");
            System.out.println("7. Exit");
            System.out.print("Enter your choice: ");
            
            int choice = scanner.nextInt();

            switch (choice) {
                case 1: manager.addEmployee(); break;
                case 2: manager.viewEmployees(); break;
                case 3: manager.searchEmployee(); break;
                case 4: manager.updateEmployee(); break;
                case 5: manager.deleteEmployee(); break;
                case 6: manager.generateReport(); break;
                case 7: System.out.println("Exiting system. Goodbye!"); System.exit(0);
                default: System.out.println("Invalid choice! Please try again.");
            }
        }
    }
}
